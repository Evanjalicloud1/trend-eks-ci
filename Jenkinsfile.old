pipeline {
  agent any

  environment {
    DOCKERHUB_REPO = 'evanjali1468/trend-app'
    AWS_REGION     = 'ap-south-1'
    EKS_CLUSTER    = 'trend-eks'
    KUBE_NS        = 'trend-app'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main',
            credentialsId: 'github-ssh',
            url: 'git@github.com:Evanjalicloud1/trend-eks-ci.git'
      }
    }

    stage('Build React App') {
      steps {
        sh '''
          set -e
          npm install
          npm run build
        '''
      }
    }

    stage('Docker Build & Push') {
      steps {
        script {
          docker.withRegistry('', 'dockerhub-credentials') {
            def img = docker.build("${DOCKERHUB_REPO}:${env.BUILD_NUMBER}")
            img.push()
            img.push('latest')
          }
        }
      }
    }

    stage('Deploy to EKS') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'aws-eks-creds',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          sh '''
            set -e
            # kubeconfig for this agent
            aws eks --region "$AWS_REGION" update-kubeconfig --name "$EKS_CLUSTER"

            # make sure namespace exists
            kubectl get ns "$KUBE_NS" >/dev/null 2>&1 || kubectl create ns "$KUBE_NS"

            # try rolling update; if deploy doesn't exist yet, create from file
            if kubectl -n "$KUBE_NS" get deploy/trend-app >/dev/null 2>&1; then
              kubectl -n "$KUBE_NS" set image deploy/trend-app trend-app="${DOCKERHUB_REPO}:${BUILD_NUMBER}"
            else
              kubectl -n "$KUBE_NS" apply -f k8s/deployment.yaml
              kubectl -n "$KUBE_NS" set image deploy/trend-app trend-app="${DOCKERHUB_REPO}:${BUILD_NUMBER}"
            fi

            # (re)apply service to be safe/idempotent
            kubectl -n "$KUBE_NS" apply -f k8s/service.yaml

            # wait until rollout completes
            kubectl -n "$KUBE_NS" rollout status deploy/trend-app

            # print the LB URL
            HOST=$(kubectl -n "$KUBE_NS" get svc trend-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "EKS LoadBalancer URL: http://$HOST:3000"
          '''
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline finished.'
    }
  }
}
